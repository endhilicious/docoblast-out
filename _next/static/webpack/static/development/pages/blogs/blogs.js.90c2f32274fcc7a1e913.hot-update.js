webpackHotUpdate("static/development/pages/blogs/blogs.js",{

/***/ "./components/pageLayouts/partials/blogsHeader.jsx":
/*!*********************************************************!*\
  !*** ./components/pageLayouts/partials/blogsHeader.jsx ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var emotion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! emotion */ "./node_modules/emotion/dist/index.esm.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var reactism_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! reactism/elements */ "./components/elements/index.jsx");
/* harmony import */ var reactism_components_containers_gridLayouts_mainGrid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! reactism/components/containers/gridLayouts/mainGrid */ "./components/containers/gridLayouts/mainGrid.jsx");
/* harmony import */ var reactism_components_containers_gridLayouts_listGrid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! reactism/components/containers/gridLayouts/listGrid */ "./components/containers/gridLayouts/listGrid.jsx");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// import { useState, useEffect } from 'react';




 // const Header = ({ styleColorTextHeader, ...props}) => {
// }
// export default Header



var Header =
/*#__PURE__*/
function (_Component) {
  _inherits(Header, _Component);

  // const [displayProduct, setDisplayProduct] = useState(false);
  // const [displayKnowMore, setDisplayKnowMore] = useState(false);
  // const [toogleNav, setToogleNav] = useState(true);
  // const [toogleSearch, settoogleSearch] = useState(true);
  // handleToggle = value => {
  //   if (value === 'displayProduct') {
  //     setDisplayProduct(!displayProduct)
  //     displayKnowMore === true && setDisplayKnowMore(!displayKnowMore)
  //   }
  //   if (value === 'displayKnowMore') {
  //     setDisplayKnowMore(!displayKnowMore)
  //     displayProduct === true && setDisplayProduct(!displayProduct)
  //   }
  // }
  function Header(props) {
    var _this;

    _classCallCheck(this, Header);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDocumentClick", function (e) {
      if (_assertThisInitialized(_assertThisInitialized(_this))) {
        if (!findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).contains(e.target)) {
          _this.setState({
            toogleNav: true
          });
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleToggle", function (value) {
      var _this$state = _this.state,
          displayProduct = _this$state.displayProduct,
          displayKnowMore = _this$state.displayKnowMore;

      if (value === 'displayProduct') {
        // setDisplayProduct(!displayProduct)
        _this.setState({
          displayProduct: !displayProduct
        });

        displayKnowMore === true && _this.setState({
          displayKnowMore: !displayKnowMore
        });
      }

      if (value === 'displayKnowMore') {
        _this.setState({
          displayKnowMore: !displayKnowMore
        });

        displayProduct === true && _this.setState({
          displayProduct: !displayProduct
        });
      }
    });

    _this.state = {
      displayProduct: false,
      displayKnowMore: false,
      toogleNav: true,
      toogleSearch: true
    };
    return _this;
  }

  _createClass(Header, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      document.addEventListener('click', this.handleDocumentClick, false);
      document.addEventListener('touchend', this.handleDocumentClick, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleDocumentClick, false);
      document.removeEventListener('touchend', this.handleDocumentClick, false);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var handleToggle = this.handleToggle;
      var styleColorTextHeader = this.props.styleColorTextHeader;
      var _this$state2 = this.state,
          displayProduct = _this$state2.displayProduct,
          displayKnowMore = _this$state2.displayKnowMore,
          toogleNav = _this$state2.toogleNav,
          toogleSearch = _this$state2.toogleSearch;
      var mainStyle =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("@import url('https://fonts.googleapis.com/css?family=Ubuntu:400,400i,700,700i');font-family:'Ubuntu',sans-serif;position:fixed;z-index:1;box-shadow:0px -9px 25px 0px rgba(0,0,0,0.8);background-color:#fff;width:100%;margin:0px;a{text-decoration:none;}.hamburger{cursor:pointer;padding-top:5px;width:10%;float:right;transition:0.5s;div{background-color:#000;height:2px;margin:6px 0px;transition:0.5s;}}.cross{div:nth-child(1){transform:rotate(-45deg);margin-top:13px;transition:0.5s;}div:nth-child(2){transform:rotate(45deg);margin-top:-6px;transition:0.5s;}div:nth-child(3){transform:rotate(45deg);margin-top:-6px;transition:0.5s;}width:10%;float:right;div{background-color:#000;height:2px;margin:4px 0px;}transition:0.5s;}.main-menu{overflow:scroll;}ul{float:right;list-style-type:none;margin:0;padding:0;overflow:hidden;li{float:left;margin-top:10px;a{cursor:pointer;text-decoration:none;padding:14px;", styleColorTextHeader || "color: #000 ", ";font-size:0.9rem;span img{margin-bottom:-6px;}}}}.sub-menu{overflow:inherit;margin:-30px 0px -30px -14px;height:110px;padding:10px 0px;li{width:25%;a{padding:10px;span{margin-right:10px;}}}}.blogs-link{border-left:1px solid lightgrey;position:absolute;font-size:2rem;margin-left:7px;padding-left:10px;color:#1798D1;}.responsive{display:block;transition:all 0.5s linear;}.hamburger,.cross{display:none;}@media screen and (max-width:600px){margin:0px;ul{li{margin:15px 0px;width:100%;}}.sub-menu{height:200px;li{text-align:center;width:50%;a{padding:0px;}}}.responsive{display:none;transition:all 0.5s linear;}.hamburger,.cross{display:block;}}.search-section{float:right;}.hidden-search{display:none;}.close-icon{position:absolute;cursor:pointer;font-size:31px;margin:-14px 0px 0px 21px;}.sub-menu-responsive{display:none;}@media screen and (max-width:600px){.sub-menu-responsive{display:block;ul{li{width:50%;font-size:0.6rem;text-align:center;}}}.display-important-600{display:none;}.main-menu{float:left;}.close-icon{display:none;}.search-button{display:none;}.hidden-search{display:block;}}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
      var mainGridStyle =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("width:60%;@media screen and (max-width:600px){width:90%;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
      var gridMenuStyle =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("margin-bottom:20px;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbmRpL0RvY3VtZW50cy9jb2RpbmcvbmV4dC9wcm9qZWN0L3Rlc3QvY29tcG9uZW50cy9wYWdlTGF5b3V0cy9wYXJ0aWFscy9ibG9nc0hlYWRlci5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaVEyQiIsImZpbGUiOiIvVXNlcnMvZW5kaS9Eb2N1bWVudHMvY29kaW5nL25leHQvcHJvamVjdC90ZXN0L2NvbXBvbmVudHMvcGFnZUxheW91dHMvcGFydGlhbHMvYmxvZ3NIZWFkZXIuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2Vtb3Rpb24nXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXG5pbXBvcnQgeyBCdXR0b24sIElucHV0IH0gZnJvbSAncmVhY3Rpc20vZWxlbWVudHMnXG5cbmltcG9ydCBNYWluR3JpZCAgZnJvbSAncmVhY3Rpc20vY29tcG9uZW50cy9jb250YWluZXJzL2dyaWRMYXlvdXRzL21haW5HcmlkJ1xuaW1wb3J0IExpc3RHcmlkICBmcm9tICdyZWFjdGlzbS9jb21wb25lbnRzL2NvbnRhaW5lcnMvZ3JpZExheW91dHMvbGlzdEdyaWQnXG5cbi8vIGNvbnN0IEhlYWRlciA9ICh7IHN0eWxlQ29sb3JUZXh0SGVhZGVyLCAuLi5wcm9wc30pID0+IHtcblxuLy8gfVxuLy8gZXhwb3J0IGRlZmF1bHQgSGVhZGVyXG5cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLy8gY29uc3QgW2Rpc3BsYXlQcm9kdWN0LCBzZXREaXNwbGF5UHJvZHVjdF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIC8vIGNvbnN0IFtkaXNwbGF5S25vd01vcmUsIHNldERpc3BsYXlLbm93TW9yZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIC8vIGNvbnN0IFt0b29nbGVOYXYsIHNldFRvb2dsZU5hdl0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgLy8gY29uc3QgW3Rvb2dsZVNlYXJjaCwgc2V0dG9vZ2xlU2VhcmNoXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gIC8vIGhhbmRsZVRvZ2dsZSA9IHZhbHVlID0+IHtcbiAgLy8gICBpZiAodmFsdWUgPT09ICdkaXNwbGF5UHJvZHVjdCcpIHtcbiAgLy8gICAgIHNldERpc3BsYXlQcm9kdWN0KCFkaXNwbGF5UHJvZHVjdClcbiAgLy8gICAgIGRpc3BsYXlLbm93TW9yZSA9PT0gdHJ1ZSAmJiBzZXREaXNwbGF5S25vd01vcmUoIWRpc3BsYXlLbm93TW9yZSlcbiAgLy8gICB9XG4gIC8vICAgaWYgKHZhbHVlID09PSAnZGlzcGxheUtub3dNb3JlJykge1xuICAvLyAgICAgc2V0RGlzcGxheUtub3dNb3JlKCFkaXNwbGF5S25vd01vcmUpXG4gIC8vICAgICBkaXNwbGF5UHJvZHVjdCA9PT0gdHJ1ZSAmJiBzZXREaXNwbGF5UHJvZHVjdCghZGlzcGxheVByb2R1Y3QpXG4gIC8vICAgfVxuICAvLyB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRpc3BsYXlQcm9kdWN0IDogZmFsc2UsXG4gICAgICBkaXNwbGF5S25vd01vcmUgOiBmYWxzZSxcbiAgICAgIHRvb2dsZU5hdiA6IHRydWUsXG4gICAgICB0b29nbGVTZWFyY2ggOiB0cnVlXG4gICAgfVxuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljaywgZmFsc2UpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2ssIGZhbHNlKVxuICB9XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrLCBmYWxzZSlcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljaywgZmFsc2UpXG4gIH1cblxuICBoYW5kbGVEb2N1bWVudENsaWNrID0gZSA9PiB7XG4gICAgaWYgKHRoaXMpIHtcbiAgICAgIGlmICghZmluZERPTU5vZGUodGhpcykuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0b29nbGVOYXYgOiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlVG9nZ2xlID0gdmFsdWUgPT4ge1xuICAgIGNvbnN0IHsgZGlzcGxheVByb2R1Y3QsIGRpc3BsYXlLbm93TW9yZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmICh2YWx1ZSA9PT0gJ2Rpc3BsYXlQcm9kdWN0Jykge1xuICAgICAgLy8gc2V0RGlzcGxheVByb2R1Y3QoIWRpc3BsYXlQcm9kdWN0KVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRpc3BsYXlQcm9kdWN0OiAhZGlzcGxheVByb2R1Y3R9KVxuICAgICAgZGlzcGxheUtub3dNb3JlID09PSB0cnVlICYmIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5S25vd01vcmUgOiAhZGlzcGxheUtub3dNb3JlIH0pXG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gJ2Rpc3BsYXlLbm93TW9yZScpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5S25vd01vcmUgOiAhZGlzcGxheUtub3dNb3JlIH0pXG4gICAgICBkaXNwbGF5UHJvZHVjdCA9PT0gdHJ1ZSAmJiB0aGlzLnNldFN0YXRlKHsgZGlzcGxheVByb2R1Y3Q6ICFkaXNwbGF5UHJvZHVjdH0pXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGFuZGxlVG9nZ2xlIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgc3R5bGVDb2xvclRleHRIZWFkZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkaXNwbGF5UHJvZHVjdCwgZGlzcGxheUtub3dNb3JlLCB0b29nbGVOYXYsIHRvb2dsZVNlYXJjaCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG1haW5TdHlsZSA9IGNzc2BcbiAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVVidW50dTo0MDAsNDAwaSw3MDAsNzAwaScpO1xuICAgIGZvbnQtZmFtaWx5OiAnVWJ1bnR1Jywgc2Fucy1zZXJpZjtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgei1pbmRleDogMTtcbiAgICBib3gtc2hhZG93OiAwcHggLTlweCAyNXB4IDBweCByZ2JhKDAsMCwwLDAuOCk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW46IDBweDtcbiAgICBhIHtcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG4gICAgLmhhbWJ1cmdlciB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBwYWRkaW5nLXRvcDogNXB4O1xuICAgICAgd2lkdGg6IDEwJTtcbiAgICAgIGZsb2F0OiByaWdodDtcbiAgICAgIHRyYW5zaXRpb246IDAuNXM7XG4gICAgICBkaXYge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICAgICAgICBoZWlnaHQ6IDJweDtcbiAgICAgICAgbWFyZ2luOiA2cHggMHB4O1xuICAgICAgICB0cmFuc2l0aW9uOiAwLjVzO1xuICAgICAgfVxuICAgIH1cbiAgICAuY3Jvc3Mge1xuICAgICAgZGl2Om50aC1jaGlsZCgxKSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG4gICAgICAgIG1hcmdpbi10b3A6IDEzcHg7XG4gICAgICAgIHRyYW5zaXRpb246IDAuNXM7XG4gICAgICB9XG4gICAgICBkaXY6bnRoLWNoaWxkKDIpIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgICAgICBtYXJnaW4tdG9wOiAtNnB4O1xuICAgICAgICB0cmFuc2l0aW9uOiAwLjVzO1xuICAgICAgfVxuICAgICAgZGl2Om50aC1jaGlsZCgzKSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICAgICAgbWFyZ2luLXRvcDogLTZweDtcbiAgICAgICAgdHJhbnNpdGlvbjogMC41cztcbiAgICAgIH1cbiAgICAgIHdpZHRoOiAxMCU7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBkaXYge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICAgICAgICBoZWlnaHQ6IDJweDtcbiAgICAgICAgbWFyZ2luOiA0cHggMHB4O1xuICAgICAgfVxuICAgICAgdHJhbnNpdGlvbjogMC41cztcbiAgICB9XG4gICAgLm1haW4tbWVudSB7XG4gICAgICBvdmVyZmxvdzogc2Nyb2xsO1xuICAgIH1cbiAgICB1bCB7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwYWRkaW5nOiAwO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIGxpIHtcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgICAgIGEge1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgcGFkZGluZzogMTRweDtcbiAgICAgICAgICAke3N0eWxlQ29sb3JUZXh0SGVhZGVyIHx8YGNvbG9yOiAjMDAwIGB9O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMC45cmVtO1xuICAgICAgICAgIHNwYW4gaW1nIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IC02cHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC5zdWItbWVudXtcbiAgICAgIG92ZXJmbG93OiBpbmhlcml0O1xuICAgICAgbWFyZ2luOiAtMzBweCAwcHggLTMwcHggLTE0cHg7XG4gICAgICBoZWlnaHQ6IDExMHB4O1xuICAgICAgcGFkZGluZzogMTBweCAwcHg7XG4gICAgICBsaSB7XG4gICAgICAgIHdpZHRoOiAyNSU7XG4gICAgICAgIGEge1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgc3BhbntcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDoxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAuYmxvZ3MtbGluayB7XG4gICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIGxpZ2h0Z3JleTtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICAgIG1hcmdpbi1sZWZ0OiA3cHg7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICBjb2xvcjogIzE3OThEMTtcbiAgICB9XG4gICAgLnJlc3BvbnNpdmUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gICAgfVxuICAgIC5oYW1idXJnZXIsIC5jcm9zcyB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICB1bCB7XG4gICAgICAgIGxpIHtcbiAgICAgICAgICBtYXJnaW46IDE1cHggMHB4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAuc3ViLW1lbnUge1xuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xuICAgICAgICBsaSB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgICAgYSB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAucmVzcG9uc2l2ZSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGxpbmVhcjtcbiAgICAgIH1cbiAgICAgIC5oYW1idXJnZXIsIC5jcm9zcyB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuICAgIH1cbiAgICAuc2VhcmNoLXNlY3Rpb24ge1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgIH1cbiAgICAuaGlkZGVuLXNlYXJjaCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICAuY2xvc2UtaWNvbiB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBmb250LXNpemU6IDMxcHg7XG4gICAgICBtYXJnaW46IC0xNHB4IDBweCAwcHggMjFweDtcbiAgICB9XG4gICAgLnN1Yi1tZW51LXJlc3BvbnNpdmUge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAgIC5zdWItbWVudS1yZXNwb25zaXZlIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHVsIHtcbiAgICAgICAgICBsaSB7XG4gICAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjZyZW07XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAuZGlzcGxheS1pbXBvcnRhbnQtNjAwIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgIC5tYWluLW1lbnUge1xuICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgIH1cbiAgICAgIC5jbG9zZS1pY29uIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgIC5zZWFyY2gtYnV0dG9uIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgIC5oaWRkZW4tc2VhcmNoIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgfVxuICBgXG4gIGNvbnN0IG1haW5HcmlkU3R5bGUgPSBjc3NgXG4gICAgd2lkdGg6IDYwJTtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgd2lkdGg6IDkwJTtcbiAgICB9XG4gIGBcbiAgY29uc3QgZ3JpZE1lbnVTdHlsZSA9IGNzc2BcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBgXG4gIGNvbnN0IGdyaWRMaXN0U3R5bGUgPSBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm94LXNoYWRvdzogMHB4IDNweCA2cHggLTJweCByZ2JhKDAsMCwwLDAuOCk7XG4gICAgcGFkZGluZzogMjRweCAxMHB4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDc1cHg7XG4gICAgcmlnaHQ6IDIzMXB4O1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICBwYWRkaW5nOiAwcHg7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgdG9wOiAxOTJweDtcbiAgICB9XG4gIGBcbiAgY29uc3QgbWFpbkdyaWRTdHlsZVN1YnNjcmliZXIgPSBjc3NgXG4gICAgbGFiZWw6IG5hbWE7XG4gICAgaGVpZ2h0OiAwO1xuICBgXG4gIGNvbnN0IGlucHV0U3R5bGVTZWFyY2ggPSBjc3NgXG4gICAgZm9udC1mYW1pbHk6ICdVYnVudHUnLHNhbnMtc2VyaWY7XG4gICAgZm9udC1zaXplOiAxcmVtO1xuICAgIHdpZHRoOiA1OCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAyMCU7XG4gICAgdG9wOiAxOHB4O1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICByaWdodDogdW5zZXQ7XG4gICAgICB0b3A6IDcycHg7XG4gICAgICB3aWR0aDogODMlO1xuICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICBtYXJnaW4tdG9wOiAwcHg7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGdyZXk7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cbiAgYFxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9eyBtYWluU3R5bGUgfT5cbiAgICA8TWFpbkdyaWQgc3R5bGU9eyBtYWluR3JpZFN0eWxlIH0+XG4gICAgICA8TGlzdEdyaWQgY29scz17OH0gc3R5bGU9eyBncmlkTWVudVN0eWxlIH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9eyB0b29nbGVOYXYgPyAnaGFtYnVyZ2VyJyA6ICdjcm9zcycgfSBvbkNsaWNrPXsgKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHRvb2dsZU5hdiA6ICF0b29nbGVOYXYgfSl9PlxuICAgICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPExpbmsgaHJlZj1cIi9cIj5cbiAgICAgICAgICA8YT5cbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9kb2NvYl9sb2dvLnN2Z1wiIGFsdD1cImRvY29ibGFzdC1sb2dvXCIgd2lkdGg9ezEwMH0vPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgICA8TGluayBocmVmPVwiL2Jsb2dzXCI+XG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYmxvZ3MtbGlua1wiPlxuICAgICAgICAgICAgPHNwYW4+QmxvZzwvc3Bhbj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvTGluaz5cbiAgICAgIDwvTGlzdEdyaWQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IHRvb2dsZU5hdiA/ICdyZXNwb25zaXZlJyA6ICcnIH0+XG4gICAgICAgIDxMaXN0R3JpZCBjb2xzPXsxNn0+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm1haW4tbWVudVwiPlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInNlYXJjaC1zZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsgdG9vZ2xlU2VhcmNoICYmICdoaWRkZW4tc2VhcmNoJyB9PlxuICAgICAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIk1hc3Vra2FuIFBlbmNhcmlhblwiIHN0eWxlPXsgaW5wdXRTdHlsZVNlYXJjaCB9IC8+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbG9zZS1pY29uXCIgb25DbGljaz17ICgpID0+IHNldHRvb2dsZVNlYXJjaCghdG9vZ2xlU2VhcmNoKX0+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInNlYXJjaC1idXR0b25cIiBvbkNsaWNrPXsgKCkgPT4gc2V0dG9vZ2xlU2VhcmNoKCF0b29nbGVTZWFyY2gpfT5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvaWNfc2VhcmNoLnN2Z1wiIGFsdD1cImljLXNlYXJjaFwiIHdpZHRoPXsyMH0vPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGUoJ2Rpc3BsYXlQcm9kdWN0Jyl9PlxuICAgICAgICAgICAgICAgIDxzcGFuPkthdGVnb3JpPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9eyBkaXNwbGF5UHJvZHVjdCA/IFwiL3N0YXRpYy9pY191cC5zdmdcIiA6IFwiL3N0YXRpYy9pY19kb3duLnN2Z1wiIH0gYWx0PVwiaWNvbnNcIiB3aWR0aD17MjB9Lz5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdWItbWVudS1yZXNwb25zaXZlXCI+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17IGRpc3BsYXlQcm9kdWN0ID8gY3NzYGRpc3BsYXk6YmxvY2s7YCA6IGNzc2BkaXNwbGF5Om5vbmU7YCB9PlxuICAgICAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHNcIj48YT5Eb2NvQmxhc3Q8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy93aHlcIj48YT5NZW5nYXBhIERvY29CbGFzdD88L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy9iZW5lZml0XCI+PGE+TWFuZmFhdDwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT48TGluayBocmVmPVwiL3Byb2R1Y3RzL2JlbmVmaXRcIj48YT5NYW5mYWF0PC9hPjwvTGluaz48L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHMvYmVuZWZpdFwiPjxhPk1hbmZhYXQ8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy9iZW5lZml0XCI+PGE+TWFuZmFhdDwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT48TGluayBocmVmPVwiL3Byb2R1Y3RzL2JlbmVmaXRcIj48YT5NYW5mYWF0PC9hPjwvTGluaz48L2xpPlxuICAgICAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHMvYmVuZWZpdFwiPjxhPk1hbmZhYXQ8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy9iZW5lZml0XCI+PGE+TWFuZmFhdDwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxhIG9uQ2xpY2s9eyAoKSA9PiBoYW5kbGVUb2dnbGUoJ2Rpc3BsYXlLbm93TW9yZScpIH0+XG4gICAgICAgICAgICAgICAgPHNwYW4+QmVybGFuZ2dhbmFuPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9eyBkaXNwbGF5S25vd01vcmUgPyBcIi9zdGF0aWMvaWNfdXAuc3ZnXCIgOiBcIi9zdGF0aWMvaWNfZG93bi5zdmdcIiB9IGFsdD1cImljb25zXCIgd2lkdGg9ezIwfS8+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvTGlzdEdyaWQ+XG4gICAgICA8L2Rpdj5cbiAgICA8L01haW5HcmlkPlxuICAgIDxkaXYgY2xhc3NOYW1lPXsgdG9vZ2xlTmF2ID8gJ3Jlc3BvbnNpdmUnIDogJycgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGlzcGxheS1pbXBvcnRhbnQtNjAwXCI+XG4gICAgICAgIDxNYWluR3JpZCBzdHlsZT17IG1haW5HcmlkU3R5bGUgfSBkaXNwbGF5PXtkaXNwbGF5UHJvZHVjdCA/ICdibG9jaycgOiAnbm9uZSd9PlxuICAgICAgICAgIDxMaXN0R3JpZCBjb2xzPXsyNH0+XG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwic3ViLW1lbnVcIj5cbiAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHNcIj48YT5Eb2NvQmxhc3Q8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgIDxsaT48TGluayBocmVmPVwiL3Byb2R1Y3RzL3doeVwiPjxhPk1lbmdhcGEgRG9jb0JsYXN0PzwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHMvYmVuZWZpdFwiPjxhPk1hbmZhYXQ8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgIDxsaT48TGluayBocmVmPVwiL3Byb2R1Y3RzL2JlbmVmaXRcIj48YT5NYW5mYWF0PC9hPjwvTGluaz48L2xpPlxuICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy9iZW5lZml0XCI+PGE+TWFuZmFhdDwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHMvYmVuZWZpdFwiPjxhPk1hbmZhYXQ8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICAgIDxsaT48TGluayBocmVmPVwiL3Byb2R1Y3RzL2JlbmVmaXRcIj48YT5NYW5mYWF0PC9hPjwvTGluaz48L2xpPlxuICAgICAgICAgICAgICA8bGk+PExpbmsgaHJlZj1cIi9wcm9kdWN0cy9iZW5lZml0XCI+PGE+TWFuZmFhdDwvYT48L0xpbms+PC9saT5cbiAgICAgICAgICAgICAgPGxpPjxMaW5rIGhyZWY9XCIvcHJvZHVjdHMvYmVuZWZpdFwiPjxhPk1hbmZhYXQ8L2E+PC9MaW5rPjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvTGlzdEdyaWQ+XG4gICAgICAgIDwvTWFpbkdyaWQ+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxNYWluR3JpZCB3aWR0aD17NTB9IGRlZmF1bHRIZWlnaHQ9eyB0cnVlIH0gc3R5bGU9eyBtYWluR3JpZFN0eWxlU3Vic2NyaWJlciB9IGRpc3BsYXk9e2Rpc3BsYXlLbm93TW9yZSA/ICdibG9jaycgOiAnbm9uZSd9PlxuICAgICAgICA8TGlzdEdyaWQgY29scz17Nn0gc3R5bGU9eyBncmlkTGlzdFN0eWxlIH0+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW1haWwgQW5kYVwiIGZvbnRTaXplPXsxfSB0ZXh0QWxpZ249XCJjZW50ZXJcIiB3aWR0aD17IDkyIH0vPlxuICAgICAgICAgICAgPEJ1dHRvbiB3aWR0aD17MTAwfSBjb2xvcj1cInByaW1hcnlcIj5MYW5nZ2FuYW48L0J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9MaXN0R3JpZD5cbiAgICAgIDwvTWFpbkdyaWQ+XG4gICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iXX0= */");
      var gridListStyle =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("background-color:white;box-shadow:0px 3px 6px -2px rgba(0,0,0,0.8);padding:24px 10px;position:absolute;top:75px;right:231px;@media screen and (max-width:600px){padding:0px;left:0;top:192px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
      var mainGridStyleSubscriber =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("label:nama;height:0;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
      var inputStyleSearch =
      /*#__PURE__*/
      Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("font-family:'Ubuntu',sans-serif;font-size:1rem;width:58%;position:absolute;right:20%;top:18px;@media screen and (max-width:600px){right:unset;top:72px;width:83%;margin:0px;margin-top:0px;border:1px solid lightgrey;outline:none;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
      return react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: mainStyle
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_mainGrid__WEBPACK_IMPORTED_MODULE_3__["default"], {
        style: mainGridStyle
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_listGrid__WEBPACK_IMPORTED_MODULE_4__["default"], {
        cols: 8,
        style: gridMenuStyle
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: toogleNav ? 'hamburger' : 'cross',
        onClick: function onClick() {
          return _this2.setState({
            toogleNav: !toogleNav
          });
        }
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", null), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", null), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", null))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img", {
        src: "/static/docob_logo.svg",
        alt: "docoblast-logo",
        width: 100
      }))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/blogs"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", {
        className: "blogs-link"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", null, "Blog")))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: toogleNav ? 'responsive' : ''
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_listGrid__WEBPACK_IMPORTED_MODULE_4__["default"], {
        cols: 16
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("ul", {
        className: "main-menu"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", {
        className: "search-section"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: toogleSearch && 'hidden-search'
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_elements__WEBPACK_IMPORTED_MODULE_2__["Input"], {
        placeholder: "Masukkan Pencarian",
        style: inputStyleSearch
      }), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", {
        class: "close-icon",
        onClick: function onClick() {
          return settoogleSearch(!toogleSearch);
        }
      }, "\xD7")), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", {
        className: "search-button",
        onClick: function onClick() {
          return settoogleSearch(!toogleSearch);
        }
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img", {
        src: "/static/ic_search.svg",
        alt: "ic-search",
        width: 20
      }))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", {
        onClick: function onClick() {
          return handleToggle('displayProduct');
        }
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", null, "Kategori"), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img", {
        src: displayProduct ? "/static/ic_up.svg" : "/static/ic_down.svg",
        alt: "icons",
        width: 20
      }))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: "sub-menu-responsive"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("ul", {
        className: displayProduct ?
        /*#__PURE__*/
        Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("display:block;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") :
        /*#__PURE__*/
        Object(emotion__WEBPACK_IMPORTED_MODULE_0__["css"])("display:none;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "DocoBlast"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/why"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Mengapa DocoBlast?"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat")))))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", {
        onClick: function onClick() {
          return handleToggle('displayKnowMore');
        }
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", null, "Berlangganan"), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("img", {
        src: displayKnowMore ? "/static/ic_up.svg" : "/static/ic_down.svg",
        alt: "icons",
        width: 20
      })))))))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: toogleNav ? 'responsive' : ''
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", {
        className: "display-important-600"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_mainGrid__WEBPACK_IMPORTED_MODULE_3__["default"], {
        style: mainGridStyle,
        display: displayProduct ? 'block' : 'none'
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_listGrid__WEBPACK_IMPORTED_MODULE_4__["default"], {
        cols: 24
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("ul", {
        className: "sub-menu"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "DocoBlast"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/why"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Mengapa DocoBlast?"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(next_link__WEBPACK_IMPORTED_MODULE_1___default.a, {
        href: "/products/benefit"
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("a", null, "Manfaat"))))))), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_mainGrid__WEBPACK_IMPORTED_MODULE_3__["default"], {
        width: 50,
        defaultHeight: true,
        style: mainGridStyleSubscriber,
        display: displayKnowMore ? 'block' : 'none'
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_components_containers_gridLayouts_listGrid__WEBPACK_IMPORTED_MODULE_4__["default"], {
        cols: 6,
        style: gridListStyle
      }, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_elements__WEBPACK_IMPORTED_MODULE_2__["Input"], {
        type: "text",
        placeholder: "Email Anda",
        fontSize: 1,
        textAlign: "center",
        width: 92
      }), react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(reactism_elements__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        width: 100,
        color: "primary"
      }, "Langganan"))))));
    }
  }]);

  return Header;
}(react__WEBPACK_IMPORTED_MODULE_5__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (Header);

/***/ })

})
//# sourceMappingURL=blogs.js.90c2f32274fcc7a1e913.hot-update.js.map